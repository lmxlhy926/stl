
#include <iostream>


/**
 * 进程组以及POSIX.1引入的会话的概念。登录shell(登录时所调用的)和所有从登录shell启动的进程之间的关系
 * 
 * 在早期的UNIX系统，用户用哑终端(用硬链接连到主机)进行登录。终端或者是本地的(直接连接)或者是远程的(通过调制解调器连接)。
 * 在这两种情况下，登录都经由内核中的终端设备驱动程序。
 * 
 * 当系统自举时，内核创建进程ID为1的进程，也就是init进程。init进程使用户进入多用户模式。init读取文件/etc/ttys，对每一个
 * 允许登录的终端设备，init调用一次fork，它所生成的子进程则exec getty程序。getty对终端设备调用open函数，以读写方式将终端
 * 打开。如果设备是调制解调器，则open可能会在设备驱动程序中滞留，直到用户拨号调制解调器，并且线路被接通。一旦设备被打开，
 * 则文件描述符0、1、2就被设置到该设备。然后getty输出"login"之类的信息，并等待用户键入用户名。当用户键入用户名后，getty
 * 的工作就完成了。然后以类似于下面的方式调用login程序：
 *  execle("/bin/login", "login", "-p", username, (char*)0, envp);
 * login能处理多项工作。因为它得到了用户名，所以能调用getpwnam取得相应用户的口令文件登录项。然后调用getpass以显示提示
 * "Password: ",接着读用户键入的口令(自然，禁止回显用户键入的口令)
 * 
 * 
 * 
*/

int main(int argc, char* argv[]){
    std::cout << "----" << std::endl;
    return 0;
}




















































