什么是链接：
    链接就是将各种代码和数据片段收集并组合成为一个单一文件的过程，这个文件可被加载到内存并执行。


链接发生的时机：
    1. 编译时：即源代码被翻译为机器代码时。链接静态库时，采用该方式。
    2. 加载时：程序被加载器加载到内存后、开始执行前。链接共享库时，可采用该方式。
    3. 运行时：应用程序在用户代码中主动调用动态链接器接口，主动加载共享库。链接共享库时，可采用该方式。


链接带来的好处：
    分离编译：不用将一个大型的应用程序组织为一个巨大的源文件，而是可以将它分解为更小、更好管理的模块，可以
独立的修改和编译这些模块。当我们改变这些模块中的一个时，只需简单的重新编译它，并重新链接应用，而不必重新编译
其它文件。


链接器的2个主要任务：
    * 符号解析：目标文件定义和引用符号，每个符号对应一个函数、一个全局变量或一个静态变量(即C语言中任何以
static属性声明的变量)。符号解析的目的是将每个符号引用正好和一个符号定义关联起来。

    * 重定位：编译器和汇编器生成从地址0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，
从而重定位这些节，然后修改所有对这些符号的引用，使得它们指向这个内存位置。链接器使用汇编器产生的重定位条目
的详细指令，不加甄别地执行这样的重定位。

    目标文件纯粹是字节快的集合。这些块中，有些包含程序代码，有些包含程序数据，而其它则包含引导链接器
和加载器的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。
链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。


目标文件的三种形式：
    可重定位目标文件：包含二进制代码和数据，其形式可以在编译时与其它可重定位目标文件合并起来，创建一个可执行文件。
    共享目标文件：    一种特殊类型的可重定位目标文件，可以在加载或者运行时被动态地加载进内存并链接。
    可执行目标文件：  包含二进制代码和数据，其形式可以被直接复制到内存并执行。

    目标文件是按照特定的目标文件格式组织的，各个系统的目标文件格式都不相同。
    从贝尔实验室诞生的第一个Unix系统使用的是a.out格式。
    Windows使用可移植可执行格式：Portable Executable, PE
    现代x86-64 Linux 和 Unix系统使用可执行可链接格式：Executable and Linkable Format, ELF


可重定位目标文件：
    一个典型的ELF可重定位目标文件格式。ELF头以一个16字节的序列开始，这个序列描述了生成该文件的系统的
字的大小和字节顺序。ELF头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包含ELF头的大小、
目标文件的类型(如可重定位、共享的、可执行的)、机器类型(如X86-64)、节头部表的文件偏移，以及节头部表中
条目的大小和数量。不同节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。
夹在ELF头和节头部表之间的都是节。

    .symtab: 
        一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。
        每个符号都被分配到目标文件的某个节，由section字段表示，该字段也是一个到节头部表的索引。
        三个特殊的伪节，它们在节头部表中是没有条目的：
            ABS：   不该被重定位的符号
            UNDEF： 未定义的符号，也就是在本目标模块中引用，但是却在其它地方定义的符号；

        ELF符号表条目：
            {
                名称：
                类型：函数|数据
                位置：指定节的指定偏移量处
                大小：符号指定的函数或者数据占用的大小
            }
        如以下示例：
            全局符号main定义的条目，它是一个位于.text节中偏移量为0处的24字节函数
            全局符号array的定义，它是一个位于.data节中偏移量为0处的8字节目标。
            来自对外部符号sum的引用

    .rel.text:


    .rel.data:



    .strtab:










静态链接：
    像Linux LD程序这样的静态链接器以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的、可以加载和
运行的可执行目标文件作为输出。













































































